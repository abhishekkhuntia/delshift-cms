#!/usr/bin/env node
'use strict';
const express = require('express')
const bodyParser = require('body-parser')
const apiHandler = require('../controllers/controller')
const pageLoader = require('../controllers/page-loader');
const browserUtil = require('../util/browser-util');
const cacheManager = require('../memory-cache/memory-cache');
const app = express()
const chalk = require('chalk')
const path = require('path')
let PORT = 4040;
const fs = require('fs');

const binLink = __dirname.replace('bin', '');
var jsonParser = bodyParser.json() // to be used for parsing body

try{
    let config = fs.readFileSync(path.join(binLink,'delshift-build.json'),{encoding: 'utf-8'});
    if(config){
        global.appConfig = JSON.parse(config);
    }
} catch(err){
    console.log(chalk.red('delshift-build.json, unable to load'));
    process.exit(0);
}
global.appPublicPath = path.join(binLink, 'public');
app.use((req, res, next)=>{
    if(req){
        req.appPublicPath = path.join(binLink, 'public');
        global.apiBaseUrl = `${req.protocol}://${req.hostname}:${PORT}/api/`;
    }
    next();
});
app.get('/',(req, res)=>{
    res.sendFile(path.join(req.appPublicPath, 'index.html'))
});
app.use('/api/*', jsonParser ,apiHandler.apiHandler);
app.get('/edit/*', pageLoader)
app.use('/__delshift', express.static(path.join(binLink, 'public'))); // hosting the delcms files
/**
 * live url is to load the page as it looks like
 */
app.use('/live',express.static(process.cwd()));
app.set('pageCache', new cacheManager());
let maxRetry = 5;
let retryCount = 0;
const initializeApp = (randomMize)=> {
    retryCount++;
    if(retryCount > maxRetry){
        console.log(chalk.red('Error initializing application'));
        process.exit(1);
    }
    if(randomMize){
        PORT += Math.floor((Math.random()*100));
        console.log(chalk.yellow("Retrying to initialize with port ", PORT));
    }
    app.listen(PORT, ()=> {
        app.set('PORT', PORT);
        console.log(chalk.green("Starting Inline CMS Backend at "), chalk.yellow(PORT));
        browserUtil.openBrowser(`http://localhost:${PORT}`)
    })
    .on('error', (err)=> {
        switch(err.code){
            case 'EADDRINUSE':
                initializeApp(true);
            break;
        }
    }); 
};
initializeApp();
module.exports = app;